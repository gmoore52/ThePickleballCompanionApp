DROP TABLE IF EXISTS EVENTS CASCADE;
DROP TABLE IF EXISTS LOCATION_META CASCADE;
DROP TABLE IF EXISTS LOCATIONS CASCADE;
DROP TABLE IF EXISTS GAMES CASCADE;
DROP TABLE IF EXISTS REQUESTS CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;


CREATE TABLE USERS(
    USER_NAME VARCHAR(32) PRIMARY KEY,
    USER_FULL_NAME VARCHAR(120) NOT NULL,
    EMAIL_ADDR VARCHAR(120) NOT NULL,
    PASSWORD VARCHAR(60) NOT NULL,
    PROFILE_IMG_LOC VARCHAR(120),
    SKILL_LVL INTEGER,
    ACC_CREATION_DATE TIMESTAMP NOT NULL
);

CREATE TABLE LOCATION_META(
    META_ID SERIAL PRIMARY KEY,
    AVAILABILITY VARCHAR(8),
    SHELTER BOOLEAN,
    NET_TYPE VARCHAR(10)
);

CREATE TABLE LOCATIONS(
    LOC_ID SERIAL PRIMARY KEY,
    COURT_NAME VARCHAR(50) NOT NULL,
    COURT_PIC VARCHAR(128),
    NUM_OF_COURTS INTEGER NOT NULL,
    ADDRESS VARCHAR(120) NOT NULL,
    COORDINATES VARCHAR(120),
    COURT_META_ID INTEGER REFERENCES LOCATION_META(META_ID)
);

CREATE TABLE GAMES(
    GAME_ID SERIAL PRIMARY KEY,
    GAME_DATE TIMESTAMP NOT NULL,
    PLAYER_1_ID VARCHAR(32) NOT NULL REFERENCES USERS(USER_NAME),
    PLAYER_2_ID VARCHAR(32) NOT NULL REFERENCES USERS(USER_NAME),
    PLAYER_3_ID VARCHAR(32) REFERENCES USERS(USER_NAME),
    PLAYER_4_ID VARCHAR(32) REFERENCES USERS(USER_NAME),
    LOCATION_ID INTEGER REFERENCES LOCATIONS(LOC_ID),
    TEAM_1_SCORE INTEGER NOT NULL,
    TEAM_2_SCORE INTEGER NOT NULL,
    DESCRIPTION VARCHAR(512)
);



CREATE TABLE EVENTS(
    EVENT_ID SERIAL PRIMARY KEY,
    EVENT_START TIMESTAMP NOT NULL,
    EVENT_END TIMESTAMP NOT NULL,
    EVENT_LOC INTEGER NOT NULL REFERENCES LOCATIONS(LOC_ID),
    EVENT_TITLE VARCHAR(64) NOT NULL,
    EVENT_DESC VARCHAR(120) NOT NULL
);

CREATE TABLE REQUESTS
(
    REQUEST_ID       SERIAL PRIMARY KEY,
    REQUEST_TYPE     VARCHAR(25) NOT NULL,
    REQUEST_DATE     TIMESTAMP NOT NULL,
    ORIGIN_ID        VARCHAR(32)   NOT NULL REFERENCES USERS (USER_NAME),
    EVENT_ID         INTEGER REFERENCES EVENTS (EVENT_ID),
    DESTINATION_ID   VARCHAR(32)   NOT NULL REFERENCES USERS (USER_NAME),
    REQUEST_STATUS   INTEGER   NOT NULL
);

-- Insert all variations of the base metadata for each possible location
INSERT INTO LOCATION_META(AVAILABILITY, SHELTER, NET_TYPE)
SELECT * FROM
     (
         (SELECT 'PUBLIC' UNION
          SELECT 'PRIVATE' UNION
          SELECT 'MEMBER' UNION
          SELECT 'FEE') A
           CROSS JOIN
         (SELECT TRUE UNION
          SELECT FALSE) S
            CROSS JOIN
         (SELECT 'BYO' UNION
          SELECT 'PERMANENT' UNION
          SELECT 'PORTABLE') N_T
     );

CREATE OR REPLACE VIEW USER_STATISTICS AS
SELECT
U.USER_NAME AS USER_NAME,
COUNT(1) AS TOTAL_GAMES,
(
SELECT COUNT(1)
FROM GAMES G2
WHERE (U.USER_NAME IN (G2.PLAYER_1_ID, G2.PLAYER_3_ID)
    AND G2.TEAM_1_SCORE > G2.TEAM_2_SCORE)
   OR (U.USER_NAME IN (G2.PLAYER_2_ID, G2.PLAYER_4_ID)
    AND G2.TEAM_1_SCORE < G2.TEAM_2_SCORE)
GROUP BY U.USER_NAME
) AS TOTAL_WINS,
(
SELECT COUNT(1)
FROM GAMES G2
WHERE (U.USER_NAME IN (G2.PLAYER_1_ID, G2.PLAYER_3_ID)
    AND G2.TEAM_1_SCORE < G2.TEAM_2_SCORE)
   OR (U.USER_NAME IN (G2.PLAYER_2_ID, G2.PLAYER_4_ID)
    AND G2.TEAM_1_SCORE > G2.TEAM_2_SCORE)
GROUP BY U.USER_NAME
) AS TOTAL_LOSSES,
(
SELECT CASE
WHEN (SELECT COUNT(1) AS TOTAL_WINS
      FROM GAMES G2
      WHERE (U.USER_NAME IN (G2.PLAYER_1_ID, G2.PLAYER_3_ID)
          AND G2.TEAM_1_SCORE < G2.TEAM_2_SCORE)
         OR (U.USER_NAME IN (G2.PLAYER_2_ID, G2.PLAYER_4_ID)
          AND G2.TEAM_1_SCORE > G2.TEAM_2_SCORE)
      GROUP BY U.USER_NAME) <> 0
THEN CAST((SELECT COUNT(1) AS TOTAL_WINS
           FROM GAMES G2
           WHERE (U.USER_NAME IN (G2.PLAYER_1_ID, G2.PLAYER_3_ID)
               AND G2.TEAM_1_SCORE > G2.TEAM_2_SCORE)
              OR (U.USER_NAME IN (G2.PLAYER_2_ID, G2.PLAYER_4_ID)
               AND G2.TEAM_1_SCORE < G2.TEAM_2_SCORE)
           GROUP BY U.USER_NAME) AS NUMERIC)
    / CAST((SELECT COUNT(1) AS TOTAL_WINS
            FROM GAMES G2
            WHERE (U.USER_NAME IN (G2.PLAYER_1_ID, G2.PLAYER_3_ID)
                AND G2.TEAM_1_SCORE < G2.TEAM_2_SCORE)
               OR (U.USER_NAME IN (G2.PLAYER_2_ID, G2.PLAYER_4_ID)
                AND G2.TEAM_1_SCORE > G2.TEAM_2_SCORE)
            GROUP BY U.USER_NAME) AS NUMERIC)
        ELSE 0
        END AS WIN_LOSS_RATIO)
        AS WIN_LOSS_RATIO,
(SELECT LOCATION_ID
FROM (SELECT LOCATION_ID, COUNT(1) AS LOCATION_FREQ
   FROM GAMES
   WHERE U.USER_NAME IN (PLAYER_1_ID, PLAYER_2_ID, PLAYER_3_ID, PLAYER_4_ID)
   GROUP BY LOCATION_ID) AS L_ID_T_FQ
ORDER BY LOCATION_FREQ DESC
LIMIT 1
) AS MOST_FREQ_LOCATION,
(SELECT TEAMATE_NAME
FROM (
      SELECT COUNT(1) AS FREQ, TEAMATE_NAME
      FROM (
               SELECT G.PLAYER_3_ID AS TEAMATE_NAME
               FROM GAMES G
               WHERE G.PLAYER_1_ID = U.USER_NAME
               UNION ALL
               SELECT G.PLAYER_1_ID AS TEAMATE_NAME
               FROM GAMES G
               WHERE G.PLAYER_3_ID = U.USER_NAME
               UNION ALL
               SELECT G.PLAYER_4_ID AS TEAMATE_NAME
               FROM GAMES G
               WHERE G.PLAYER_2_ID = U.USER_NAME
               UNION ALL
               SELECT G.PLAYER_2_ID AS TEAMATE_NAME
               FROM GAMES G
               WHERE G.PLAYER_4_ID = U.USER_NAME
           ) AS TEAMATES
      GROUP BY TEAMATE_NAME
      ORDER BY FREQ DESC
      LIMIT 1
  ) MOST_FREQ_TEAMATE
) AS MOST_FREQ_TEAMATE,
(SELECT OPPONENT_NAME
FROM (
      SELECT COUNT(1) AS FREQ, OPPONENT_NAME
      FROM (
               SELECT G.PLAYER_1_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_2_ID, G.PLAYER_4_ID)
                 AND G.TEAM_1_SCORE > G.TEAM_2_SCORE
               UNION ALL
               SELECT G.PLAYER_3_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_2_ID, G.PLAYER_4_ID)
                 AND G.TEAM_1_SCORE > G.TEAM_2_SCORE
               UNION ALL
               SELECT G.PLAYER_2_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_1_ID, G.PLAYER_3_ID)
                 AND G.TEAM_1_SCORE < G.TEAM_2_SCORE
               UNION ALL
               SELECT G.PLAYER_4_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_1_ID, G.PLAYER_3_ID)
                 AND G.TEAM_1_SCORE < G.TEAM_2_SCORE
           ) AS TEAMATES
      GROUP BY OPPONENT_NAME
      ORDER BY FREQ DESC
      LIMIT 1
  ) STRONGEST_OPPONENT) AS STRONGEST_OPPONENT,
(SELECT FREQ
FROM (
      SELECT COUNT(1) AS FREQ, OPPONENT_NAME
      FROM (
               SELECT G.PLAYER_1_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_2_ID, G.PLAYER_4_ID)
                 AND G.TEAM_1_SCORE > G.TEAM_2_SCORE
               UNION ALL
               SELECT G.PLAYER_3_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_2_ID, G.PLAYER_4_ID)
                 AND G.TEAM_1_SCORE > G.TEAM_2_SCORE
               UNION ALL
               SELECT G.PLAYER_2_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_1_ID, G.PLAYER_3_ID)
                 AND G.TEAM_1_SCORE < G.TEAM_2_SCORE
               UNION ALL
               SELECT G.PLAYER_4_ID AS OPPONENT_NAME
               FROM GAMES G
               WHERE U.USER_NAME IN (G.PLAYER_1_ID, G.PLAYER_3_ID)
                 AND G.TEAM_1_SCORE < G.TEAM_2_SCORE
           ) AS TEAMATES
      GROUP BY OPPONENT_NAME
      ORDER BY FREQ DESC
      LIMIT 1
  ) STRONGEST_OPPONENT) AS MOST_LOSSES_TO_STRONGEST_OPPONENT
FROM USERS U
JOIN GAMES G
ON U.USER_NAME IN (G.PLAYER_1_ID, G.PLAYER_2_ID, G.PLAYER_3_ID, G.PLAYER_4_ID)
GROUP BY U.USER_NAME;

